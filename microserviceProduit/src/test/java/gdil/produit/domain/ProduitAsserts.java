package gdil.produit.domain;

import static gdil.produit.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProduitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitAllPropertiesEquals(Produit expected, Produit actual) {
        assertProduitAutoGeneratedPropertiesEquals(expected, actual);
        assertProduitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitAllUpdatablePropertiesEquals(Produit expected, Produit actual) {
        assertProduitUpdatableFieldsEquals(expected, actual);
        assertProduitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitAutoGeneratedPropertiesEquals(Produit expected, Produit actual) {
        assertThat(expected)
            .as("Verify Produit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitUpdatableFieldsEquals(Produit expected, Produit actual) {
        assertThat(expected)
            .as("Verify Produit relevant properties")
            .satisfies(e -> assertThat(e.getNomProduit()).as("check nomProduit").isEqualTo(actual.getNomProduit()))
            .satisfies(e -> assertThat(e.getDescriptionProduit()).as("check descriptionProduit").isEqualTo(actual.getDescriptionProduit()))
            .satisfies(e ->
                assertThat(e.getPrixProduit())
                    .as("check prixProduit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPrixProduit())
            )
            .satisfies(e -> assertThat(e.getImageProduit()).as("check imageProduit").isEqualTo(actual.getImageProduit()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitUpdatableRelationshipsEquals(Produit expected, Produit actual) {
        assertThat(expected)
            .as("Verify Produit relationships")
            .satisfies(e -> assertThat(e.getCategorie()).as("check categorie").isEqualTo(actual.getCategorie()));
    }
}
